struct outputbuffer_t

int topLineIndex 
int bottomLineIndex

function Scroll(int numberOfLines, int direction)
	int numberLinesScrolled
	
	switch(direction)
		SCROLL_DIR_UP:
			if(numberOfLines < topLineIndex) 
				numberLinesScrolled := numberOfLines
			else
				// subtracting numberOfLines from topLineIndex would
				// result in a value less than 0, which we can't have
				// because it's an index to a vector. So, to get a legal
				// value that still works as desired, subtract topLineIndex
				// from itself.
				numberLinesScrolled := topLineIndex
			end if
			
			topLineIndex -= numberOfLinesScrolled
			bottomLineIndex -= numberOfLinesScrolled
		
		SCROLL_DIR_DOWN:
			if(bottomLineIndex + numberOfLines < buffer.Length) 
				numberOfLinesScrolled := numberOfLines
			else
				numberOfLinesScrolled := buffer.Length - bottomLineIndex
			end if
			
			topLineIndex += numberOfLinesScrolled
			bottomLineIndex += numberOfLinesScrolled
	end switch
	
end function

function RenderLine(BitmapFont& font, string line, int x, int y) : void

	int lineLength = line.length()
	SDL_Rect srcRect = { 0, 0, GlyphWidth, GlyphHeight } 
	SDL_Rect destRect = { x, y, GlyphWidth, GlyphHeight }
	
	// check to see if the line is partially off-screen
	if(y < 0)
		srcRect.Y = 0 + (y * 1) // only rendering part of each character
						        //  multiplying by 1 because we need to turn the negative number in y to a positive
	end if
	
	for int i = 0, i < lineLength, i++
		srcRect.x = (line[i] - 32) * GlyphWidth
		
		SDL_BlitSurface(FontSurface, &srcRect, consoleSurface, &destRect)
		
		destRect.x += GlyphWidth
	end for
	
end function


function Render(BitmapFont& font) : void
	int yPos = startX
	
	for(int i = bottomLineIndex; i > topLineIndex; i--)
		RenderLine(BitmapFont& font, buffer[i], startX, yPos)
		if(yPos > 0)
			yPos -= font.GlyphHeight
		else
			break;	// rendered the last visible line
	end for
end function

end struct
